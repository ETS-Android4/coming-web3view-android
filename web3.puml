@startuml
class coming.web3.ethereum.NetworkInfo {
+ String name
+ String symbol
+ String rpcServerUrl
+ String etherscanUrl
+ long chainId
+ boolean isCustom
}
class coming.web3.enity.EthereumWriteBuffer {
+ void write32(BigInteger)
+ void writeAddress(BigInteger)
+ void writeAddress(String)
+ void writeBytes(String,int)
+ void writeUnsigned4(BigInteger)
+ void writeUnsigned4(long)
+ void writeCompressedIndices(int[])
+ void writeTokenIds(List<BigInteger>)
+ void writeSignature(byte[])
+ void write4ByteMicroEth(BigInteger)
+ void writeValue(String,int)
}
class coming.web3.util.Utils {
- {static} String ISOLATE_NUMERIC
- {static} String ICON_REPO_ADDRESS_TOKEN
- {static} String CHAIN_REPO_ADDRESS_TOKEN
- {static} String TOKEN_LOGO
+ {static} String ALPHAWALLET_REPO_NAME
- {static} String TRUST_ICON_REPO_BASE
- {static} String TRUST_ICON_REPO
- {static} String ALPHAWALLET_ICON_REPO
- {static} Map<Long,String> twChainNames
- {static} String IPFS_PREFIX
+ {static} int dp2px(Context,int)
+ {static} boolean isValidUrl(String)
+ {static} boolean isAlNum(String)
+ {static} boolean isValidValue(String)
- {static} String getFirstWord(String)
+ {static} String getIconisedText(String)
+ {static} String getShortSymbol(String)
+ {static} String loadJSONFromAsset(Context,String)
+ {static} boolean isAddressValid(String)
+ {static} String longArrayToString(Long[])
+ {static} List<Long> longListToArray(String)
+ {static} int[] bigIntegerListToIntList(List<BigInteger>)
+ {static} BigInteger parseTokenId(String)
+ {static} String bigIntListToString(List<BigInteger>,boolean)
+ {static} List<Integer> stringIntsToIntegerList(String)
+ {static} String integerListToString(List<Integer>,boolean)
+ {static} Map<BigInteger,BigInteger> getIdMap(List<BigInteger>)
+ {static} boolean isNumeric(String)
+ {static} boolean isHex(String)
+ {static} String isolateNumeric(String)
+ {static} String formatAddress(String)
+ {static} String escapeHTML(String)
+ {static} long randomId()
+ {static} String getDomainName(String)
+ {static} String getTokenAddrFromUrl(String)
+ {static} String getTokenAddrFromAWUrl(String)
+ {static} String getTWTokenImageUrl(long,String)
+ {static} String getTokenImageUrl(String)
+ {static} String getAWIconRepo(String)
+ {static} String parseIPFS(String)
+ {static} String loadFile(Context,int)
+ {static} long timeUntil(long)
+ {static} boolean verifyInstallerId(Context)
+ {static} boolean isTransactionHash(String)
}
interface coming.web3.enity.Signable {
~ String getMessage()
~ long getCallbackId()
~ byte[] getPrehash()
~ String getOrigin()
~ CharSequence getUserMessage()
~ SignMessageType getMessageType()
}
class coming.web3.Web3ViewClient {
- Object lock
- JsInjectorClient jsInjectorClient
- UrlHandlerManager urlHandlerManager
- boolean isInjected
~ void addUrlHandler(UrlHandler)
~ void removeUrlHandler(UrlHandler)
+ boolean shouldOverrideUrlLoading(WebView,String)
+ boolean shouldOverrideUrlLoading(WebView,WebResourceRequest)
- boolean shouldOverrideUrlLoading(WebView,String,boolean,boolean)
+ WebResourceResponse shouldInterceptRequest(WebView,WebResourceRequest)
- void injectScriptFile(WebView)
+ void onReceivedSslError(WebView,SslErrorHandler,SslError)
+ void onReload()
}
class coming.web3.enity.TypedData {
+ String name
+ String type
+ Object data
+ {static} Creator<TypedData> CREATOR
+ int describeContents()
+ void writeToParcel(Parcel,int)
}
class coming.web3.util.Hex {
+ {static} int hexToInteger(String,int)
+ {static} Integer hexToInteger(String)
+ {static} long hexToLong(String,int)
+ {static} Long hexToLong(String)
+ {static} BigInteger hexToBigInteger(String)
+ {static} BigInteger hexToBigInteger(String,BigInteger)
+ {static} BigDecimal hexToBigDecimal(String)
+ {static} BigDecimal hexToBigDecimal(String,BigDecimal)
+ {static} boolean containsHexPrefix(String)
+ {static} String cleanHexPrefix(String)
+ {static} String hexToDecimal(String)
+ {static} byte[] hexStringToByteArray(String)
+ {static} String byteArrayToHexString(byte[],int,int,boolean)
+ {static} String byteArrayToHexString(byte[])
+ {static} String hexToUtf8(String)
}
abstract class coming.web3.ethereum.EthereumNetworkBase {
+ {static} long MAINNET_ID
+ {static} long CLASSIC_ID
+ {static} long POA_ID
+ {static} long KOVAN_ID
+ {static} long ROPSTEN_ID
+ {static} long SOKOL_ID
+ {static} long RINKEBY_ID
+ {static} long XDAI_ID
+ {static} long GOERLI_ID
+ {static} long ARTIS_SIGMA1_ID
+ {static} long ARTIS_TAU1_ID
+ {static} long BINANCE_TEST_ID
+ {static} long BINANCE_MAIN_ID
+ {static} long HECO_ID
+ {static} long HECO_TEST_ID
+ {static} long FANTOM_ID
+ {static} long FANTOM_TEST_ID
+ {static} long AVALANCHE_ID
+ {static} long FUJI_TEST_ID
+ {static} long MATIC_ID
+ {static} long MATIC_TEST_ID
+ {static} long OPTIMISTIC_MAIN_ID
+ {static} long OPTIMISTIC_TEST_ID
+ {static} long CRONOS_TEST_ID
+ {static} long ARBITRUM_MAIN_ID
+ {static} long ARBITRUM_TEST_ID
+ {static} long PALM_ID
+ {static} long PALM_TEST_ID
+ {static} String MAINNET_RPC_URL
+ {static} String CLASSIC_RPC_URL
+ {static} String XDAI_RPC_URL
+ {static} String POA_RPC_URL
+ {static} String ROPSTEN_RPC_URL
+ {static} String RINKEBY_RPC_URL
+ {static} String KOVAN_RPC_URL
+ {static} String SOKOL_RPC_URL
+ {static} String GOERLI_RPC_URL
+ {static} String ARTIS_SIGMA1_RPC_URL
+ {static} String ARTIS_TAU1_RPC_URL
+ {static} String BINANCE_TEST_RPC_URL
+ {static} String BINANCE_MAIN_RPC_URL
+ {static} String HECO_RPC_URL
+ {static} String HECO_TEST_RPC_URL
+ {static} String AVALANCHE_RPC_URL
+ {static} String FUJI_TEST_RPC_URL
+ {static} String FANTOM_RPC_URL
+ {static} String FANTOM_TEST_RPC_URL
+ {static} String MATIC_RPC_URL
+ {static} String MUMBAI_TEST_RPC_URL
+ {static} String OPTIMISTIC_MAIN_URL
+ {static} String OPTIMISTIC_TEST_URL
+ {static} String CRONOS_TEST_URL
+ {static} String ARBITRUM_RPC_URL
+ {static} String ARBITRUM_TEST_RPC_URL
+ {static} String PALM_RPC_URL
+ {static} String PALM_TEST_RPC_URL
~ {static} Map<Long,NetworkInfo> networkMap
+ {static} NetworkInfo getNetworkByChain(long)
+ {static} String getShortChainName(long)
+ {static} String getChainSymbol(long)
}
class coming.web3.UrlHandlerManager {
- Map<String,UrlHandler> handlers
+ void add(UrlHandler)
+ void remove(UrlHandler)
~ String handle(String)
~ String handle(Uri)
}
class coming.web3.enity.Numeric {
- {static} String HEX_PREFIX
- {static} boolean isValidHexQuantity(String)
+ {static} String cleanHexPrefix(String)
+ {static} String prependHexPrefix(String)
+ {static} boolean containsHexPrefix(String)
+ {static} BigInteger toBigInt(byte[],int,int)
+ {static} BigInteger toBigInt(byte[])
+ {static} BigInteger toBigInt(String)
+ {static} BigInteger toBigIntNoPrefix(String)
+ {static} String toHexStringWithPrefix(BigInteger)
+ {static} String toHexStringNoPrefix(BigInteger)
+ {static} String toHexStringNoPrefix(byte[])
+ {static} String toHexStringWithPrefixZeroPadded(BigInteger,int)
+ {static} String toHexStringNoPrefixZeroPadded(BigInteger,int)
- {static} String toHexStringZeroPadded(BigInteger,int,boolean)
+ {static} byte[] toBytesPadded(BigInteger,int)
+ {static} byte[] hexStringToByteArray(String)
+ {static} String toHexString(byte[],int,int,boolean)
+ {static} String toHexString(byte[])
+ {static} byte asByte(int,int)
+ {static} boolean isIntegerValue(BigDecimal)
}
class coming.web3.util.Convert {
+ {static} BigDecimal fromWei(String,Unit)
+ {static} BigDecimal fromWei(BigDecimal,Unit)
+ {static} BigDecimal toWei(String,Unit)
+ {static} BigDecimal toWei(BigDecimal,Unit)
+ {static} String getEthString(double)
+ {static} String getEthString(double,int)
+ {static} String getConvertedValue(BigDecimal,int)
+ {static} String getEthStringSzabo(BigInteger)
}
class coming.web3.enity.EthereumReadBuffer {
- byte[] readBuffer
+ BigInteger readBI()
+ BigInteger readBI(int)
+ String readAddress()
+ int available()
+ void readSignature(byte[])
+ void readUnsignedShort(int[])
- int toUnsignedInt(short)
- int toUnsignedInt(byte)
+ long toUnsignedLong(int)
+ List<BigInteger> readTokenIdsFromSpawnableLink(int)
+ int[] readCompressedIndices(int)
+ byte[] readBytes(int)
}
class coming.web3.enity.UnsignedLong {
+ {static} UnsignedLong create(long)
+ {static} UnsignedLong create(BigInteger)
+ {static} byte[] createBytes(long)
- {static} int getByteVal(long,int)
}
class coming.web3.util.BalanceUtils {
- {static} String weiInEth
- {static} int showDecimalPlaces
- {static} String MACRO_PATTERN
- {static} String getDigitalPattern(int)
- {static} String getDigitalPattern(int,int)
- {static} String convertToLocale(String)
+ {static} BigDecimal weiToEth(BigDecimal)
+ {static} String ethToUsd(String,String)
+ {static} String EthToWei(String)
+ {static} String UnitToEMultiplier(String,BigDecimal)
+ {static} BigDecimal weiToGweiBI(BigInteger)
+ {static} String weiToGwei(BigInteger)
+ {static} String weiToGweiInt(BigDecimal)
+ {static} String weiToGwei(BigDecimal,int)
+ {static} BigInteger gweiToWei(BigDecimal)
+ {static} BigInteger baseToSubunit(String,int)
+ {static} BigDecimal subunitToBase(BigInteger,int)
+ {static} boolean isDecimalValue(String)
+ {static} String getScaledValueWithLimit(BigDecimal,long)
+ {static} String getScaledValueFixed(BigDecimal,long,int)
+ {static} String getScaledValueMinimal(BigDecimal,long,int)
- {static} boolean requiresSuffix(BigDecimal,int)
- {static} String getSuffixedValue(BigDecimal,int)
+ {static} String getScaledValue(BigDecimal,long,int)
- {static} String scaledValue(BigDecimal,String,long,int)
+ {static} String getScaledValue(String,long,int)
}
class coming.web3.enity.TokenscriptElement {
+ String localRef
+ String ref
+ String value
+ boolean isToken()
+ int getTokenIndex()
}
interface coming.web3.OnSignMessageListener {
~ void onSignMessage(Message)
}
class coming.web3.SignCallbackJSInterface {
- WebView webView
- OnSignTransactionListener onSignTransactionListener
- OnSignMessageListener onSignMessageListener
- OnSignPersonalMessageListener onSignPersonalMessageListener
- OnSignTypedMessageListener onSignTypedMessageListener
+ void signTransaction(int,String,String,String,String,String,String)
+ void signMessage(int,String)
+ void signPersonalMessage(int,String)
+ void signTypedMessage(int,String)
- String getUrl()
}
class coming.web3.SignCallbackJSInterface.TrustProviderTypedData {
+ String name
+ String type
+ Object value
}
class coming.web3.JsInjectorResponse {
~ String data
~ String url
~ String mime
~ String charset
~ boolean isRedirect
}
class coming.web3.JsInjectorClient {
- {static} String DEFAULT_CHARSET
- {static} String DEFAULT_MIME_TYPE
- {static} String JS_TAG_TEMPLATE
- Context context
- OkHttpClient httpClient
- String jsLibrary
- int chainId
- Address walletAddress
- String rpcUrl
+ Address getWalletAddress()
+ void setWalletAddress(Address)
+ int getChainId()
+ void setChainId(int)
+ String getRpcUrl()
+ void setRpcUrl(String)
~ JsInjectorResponse loadUrl(String,String)
~ JsInjectorResponse loadUrl(String,Map<String,String>)
~ String assembleJs(Context,String)
- JsInjectorResponse buildResponse(Response)
~ String injectJS(String)
- String injectJS(String,String)
- int getInjectionPosition(String)
- Request buildRequest(String,Map<String,String>)
- String loadInitJs(Context)
- String loadFile(Context,int)
- String getMimeType(String)
- String getCharset(String)
- String getContentTypeHeader(Response)
- OkHttpClient createHttpClient()
}
class coming.web3.WrapWebSettings {
- WebSettings origin
+ void setSupportZoom(boolean)
+ boolean supportZoom()
+ void setMediaPlaybackRequiresUserGesture(boolean)
+ boolean getMediaPlaybackRequiresUserGesture()
+ void setBuiltInZoomControls(boolean)
+ boolean getBuiltInZoomControls()
+ void setDisplayZoomControls(boolean)
+ boolean getDisplayZoomControls()
+ void setAllowFileAccess(boolean)
+ boolean getAllowFileAccess()
+ void setAllowContentAccess(boolean)
+ boolean getAllowContentAccess()
+ void setLoadWithOverviewMode(boolean)
+ boolean getLoadWithOverviewMode()
+ void setEnableSmoothTransition(boolean)
+ boolean enableSmoothTransition()
+ void setSaveFormData(boolean)
+ boolean getSaveFormData()
+ void setSavePassword(boolean)
+ boolean getSavePassword()
+ void setTextZoom(int)
+ int getTextZoom()
+ void setDefaultZoom(ZoomDensity)
+ ZoomDensity getDefaultZoom()
+ void setLightTouchEnabled(boolean)
+ boolean getLightTouchEnabled()
+ void setUseWideViewPort(boolean)
+ boolean getUseWideViewPort()
+ void setSupportMultipleWindows(boolean)
+ boolean supportMultipleWindows()
+ void setLayoutAlgorithm(LayoutAlgorithm)
+ LayoutAlgorithm getLayoutAlgorithm()
+ void setStandardFontFamily(String)
+ String getStandardFontFamily()
+ void setFixedFontFamily(String)
+ String getFixedFontFamily()
+ void setSansSerifFontFamily(String)
+ String getSansSerifFontFamily()
+ void setSerifFontFamily(String)
+ String getSerifFontFamily()
+ void setCursiveFontFamily(String)
+ String getCursiveFontFamily()
+ void setFantasyFontFamily(String)
+ String getFantasyFontFamily()
+ void setMinimumFontSize(int)
+ int getMinimumFontSize()
+ void setMinimumLogicalFontSize(int)
+ int getMinimumLogicalFontSize()
+ void setDefaultFontSize(int)
+ int getDefaultFontSize()
+ void setDefaultFixedFontSize(int)
+ int getDefaultFixedFontSize()
+ void setLoadsImagesAutomatically(boolean)
+ boolean getLoadsImagesAutomatically()
+ void setBlockNetworkImage(boolean)
+ boolean getBlockNetworkImage()
+ void setBlockNetworkLoads(boolean)
+ boolean getBlockNetworkLoads()
+ void setJavaScriptEnabled(boolean)
+ void setAllowUniversalAccessFromFileURLs(boolean)
+ void setAllowFileAccessFromFileURLs(boolean)
+ void setPluginState(PluginState)
+ void setDatabasePath(String)
+ void setGeolocationDatabasePath(String)
+ void setAppCacheEnabled(boolean)
+ void setAppCachePath(String)
+ void setAppCacheMaxSize(long)
+ void setDatabaseEnabled(boolean)
+ void setDomStorageEnabled(boolean)
+ boolean getDomStorageEnabled()
+ String getDatabasePath()
+ boolean getDatabaseEnabled()
+ void setGeolocationEnabled(boolean)
+ boolean getJavaScriptEnabled()
+ boolean getAllowUniversalAccessFromFileURLs()
+ boolean getAllowFileAccessFromFileURLs()
+ PluginState getPluginState()
+ void setJavaScriptCanOpenWindowsAutomatically(boolean)
+ boolean getJavaScriptCanOpenWindowsAutomatically()
+ void setDefaultTextEncodingName(String)
+ String getDefaultTextEncodingName()
+ void setUserAgentString(String)
+ String getUserAgentString()
+ void setNeedInitialFocus(boolean)
+ void setRenderPriority(RenderPriority)
+ void setCacheMode(int)
+ int getCacheMode()
+ void setMixedContentMode(int)
+ int getMixedContentMode()
+ void setOffscreenPreRaster(boolean)
+ boolean getOffscreenPreRaster()
+ void setSafeBrowsingEnabled(boolean)
+ boolean getSafeBrowsingEnabled()
+ void setDisabledActionModeMenuItems(int)
+ int getDisabledActionModeMenuItems()
}
class coming.web3.enity.Message {
- CharSequence userMessage
+ String displayOrigin
+ long leafPosition
+ byte[] prehash
+ {static} String MESSAGE_PREFIX
- SignMessageType messageType
- byte[] getEthereumMessage(String)
+ String getMessage()
+ CharSequence getUserMessage()
+ byte[] getPrehash()
+ String getOrigin()
+ long getCallbackId()
+ SignMessageType getMessageType()
- String hexToUtf8(CharSequence)
- boolean isHex(String)
- byte[] getEthereumMessagePrefix(int)
}
class coming.web3.enity.Web3Transaction {
+ Address recipient
+ Address contract
+ BigInteger value
+ BigInteger gasPrice
+ BigInteger gasLimit
+ long nonce
+ String payload
+ long leafPosition
+ String description
+ {static} Creator<Web3Transaction> CREATOR
+ int describeContents()
+ void writeToParcel(Parcel,int)
+ boolean isConstructor()
+ Transaction getWeb3jTransaction(String,long)
}
interface coming.web3.OnSignTypedMessageListener {
~ void onSignTypedMessage(Message)
}
class coming.web3.enity.MessageUtils {
+ {static} byte[] encodeParams(ProviderTypedData[])
+ {static} byte[] encodeValues(ProviderTypedData[])
- {static} int parseTypeN(String)
}
class coming.web3.enity.Address {
+ {static} Address EMPTY
- String value
+ {static} Creator<Address> CREATOR
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ int describeContents()
+ void writeToParcel(Parcel,int)
}
class coming.web3.enity.EthereumTransaction {
+ Map<String,TokenscriptElement> args
}
interface coming.web3.OnSignTransactionListener {
~ void onSignTransaction(Web3Transaction,String)
}
class coming.web3.enity.ProviderTypedData {
+ String name
+ String type
+ Object value
}
class coming.web3.enity.Web3Call {
+ Address to
+ DefaultBlockParameter blockParam
+ String payload
+ long leafPosition
}
class coming.web3.WebViewCookieJar {
- CookieManager webViewCookieManager
+ void saveFromResponse(HttpUrl,List<Cookie>)
+ List<Cookie> loadForRequest(HttpUrl)
}
interface coming.web3.OnSignPersonalMessageListener {
~ void onSignPersonalMessage(Message)
}
class coming.web3.util.StyledStringBuilder {
- List<SpanType> spanners
- int startIndex
- int startGroup
+ SpannableStringBuilder append(CharSequence)
+ SpannableStringBuilder setStyle(StyleSpan)
+ SpannableStringBuilder setColor(int)
+ SpannableStringBuilder startStyleGroup()
+ void applyStyles()
}
class coming.web3.util.StyledStringBuilder.SpanType {
~ int begin
~ int end
~ StyleSpan style
~ ForegroundColorSpan styleColour
}
interface coming.web3.UrlHandler {
~ String getScheme()
~ String handle(Uri)
}
class coming.web3.Web3View {
- {static} String JS_PROTOCOL_CANCELLED
- {static} String JS_PROTOCOL_ON_SUCCESSFUL
- {static} String JS_PROTOCOL_ON_FAILURE
- OnSignTransactionListener onSignTransactionListener
- OnSignMessageListener onSignMessageListener
- OnSignPersonalMessageListener onSignPersonalMessageListener
- OnSignTypedMessageListener onSignTypedMessageListener
- JsInjectorClient jsInjectorClient
- Web3ViewClient webViewClient
- OnSignTransactionListener innerOnSignTransactionListener
- OnSignMessageListener innerOnSignMessageListener
- OnSignPersonalMessageListener innerOnSignPersonalMessageListener
- OnSignTypedMessageListener innerOnSignTypedMessageListener
+ void setWebChromeClient(WebChromeClient)
+ void setWebViewClient(WebViewClient)
- void init()
+ WebSettings getSettings()
+ void setWalletAddress(Address)
+ Address getWalletAddress()
+ void setChainId(int)
+ int getChainId()
+ void setRpcUrl(String)
+ String getRpcUrl()
+ void addUrlHandler(UrlHandler)
+ void removeUrlHandler(UrlHandler)
+ void setOnSignTransactionListener(OnSignTransactionListener)
+ void setOnSignMessageListener(OnSignMessageListener)
+ void setOnSignPersonalMessageListener(OnSignPersonalMessageListener)
+ void setOnSignTypedMessageListener(OnSignTypedMessageListener)
+ void onSignTransactionSuccessful(Web3Transaction,String)
+ void onSignMessageSuccessful(Message,String)
+ void onSignPersonalMessageSuccessful(Message,String)
+ void onSignError(Web3Transaction,String)
+ void onSignError(Message,String)
+ void onSignCancel(Web3Transaction)
- void callbackToJS(long,String,String)
}
class coming.web3.Web3View.WrapWebViewClient {
- Web3ViewClient internalClient
- WebViewClient externalClient
- JsInjectorClient jsInjectorClient
+ boolean shouldOverrideUrlLoading(WebView,String)
+ boolean shouldOverrideUrlLoading(WebView,WebResourceRequest)
+ WebResourceResponse shouldInterceptRequest(WebView,WebResourceRequest)
}


java.io.DataOutputStream <|-- coming.web3.enity.EthereumWriteBuffer
android.webkit.WebViewClient <|-- coming.web3.Web3ViewClient
android.os.Parcelable <|.. coming.web3.enity.TypedData
java.io.DataInputStream <|-- coming.web3.enity.EthereumReadBuffer
java.math.BigInteger <|-- coming.web3.enity.UnsignedLong
coming.web3.SignCallbackJSInterface +.. coming.web3.SignCallbackJSInterface.TrustProviderTypedData
android.webkit.WebSettings <|-- coming.web3.WrapWebSettings
coming.web3.enity.Signable <|.. coming.web3.enity.Message
android.os.Parcelable <|.. coming.web3.enity.Web3Transaction
android.os.Parcelable <|.. coming.web3.enity.Address
okhttp3.CookieJar <|.. coming.web3.WebViewCookieJar
android.text.SpannableStringBuilder <|-- coming.web3.util.StyledStringBuilder
coming.web3.util.StyledStringBuilder +.. coming.web3.util.StyledStringBuilder.SpanType
android.webkit.WebView <|-- coming.web3.Web3View
coming.web3.Web3View +.. coming.web3.Web3View.WrapWebViewClient
coming.web3.WebViewClient <|-- coming.web3.Web3View.WrapWebViewClient
@enduml